Challenge 13 - Sparse randomness
Randall has recently enrolled in a cryptography course, where he's learning about encryption, security and randomness. In order to fully complete the course, he has to submit a project about any topic taught during the course, and due to his fascination with randomness and pseudo random number generators (PRNG) he decided to focus his project on it.

One of the ideas he has in mind for the project is to build his own simple PRNG, which will work in the following way: it will be initialized with a random seed which will also be used as the first number that the PRNG outputs. When generating the next one, it might happen that be a number greater than or equal to the previous one, depending on an internal algorithm.

In order to test the degree of randomness achieved by his PRNG, Randall has decided to generate a sequence of numbers with it and then measure the maximum number of repetitions found in some given subsequences.

Can you help Randall to calculate this metric?


Input

The input file starts with a single line containing the number of test cases, T. Each test case begins with 2 numbers in a single line:

N, the length of the pseudo random number sequence to study
M, the number of study cases Randall wants to analyze
The next line will contain N numbers representing the sequence generated by Randall's PRNG. Finally, M lines will follow, each one containing 2 numbers s_m, e_m representing a subsequence of the original sequence (1-based numbering).

Output

Each test case should start with the string "Test case #" followed by the number of the test case, starting at 1. For each interval that Randall is interested in, output one single line indicating the maximum number of repetitions found inside the subsequence given by that interval.

Limits

1 ≤ T ≤ 5
1 ≤ N ≤ 10**6
1 ≤ M ≤ 10**4
1 ≤ s_m ≤ e_m ≤ N
All numbers will fit into a 32-bit signed integer.
Note: In the submit phase, the size of the input provided can be larger than 10MB. Keep this in mind when submitting.

Sample input

2
12 5
1 1 2 4 7 7 11 11 11 15 17 17
1 5
7 9
6 8
9 11
1 12
5 2
7 7 7 999 999
1 3
4 5
Sample output

Test case #1
2
3
2
1
3
Test case #2
3
2

